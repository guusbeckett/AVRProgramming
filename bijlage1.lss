
bijlage1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  00000268  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000352  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000167  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000283  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000186  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000133  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	6a c0       	rjmp	.+212    	; 0xda <__vector_1>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4f d0       	rcall	.+158    	; 0x152 <main>
  b4:	91 c0       	rjmp	.+290    	; 0x1d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
unsigned int  waitLength = 500;
// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <__vector_1>:
		_delay_ms( 1 );				// library function (max 30 ms at 8MHz)
}

// Interrupt service routine External Input0
ISR( INT0_vect )
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	if (toggle)
  e6:	80 91 02 01 	lds	r24, 0x0102
  ea:	88 23       	and	r24, r24
  ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_1+0x1a>
	{
	    toggle = 0;	
  ee:	10 92 02 01 	sts	0x0102, r1
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_1+0x20>
	}
	else
	{
		toggle = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 02 01 	sts	0x0102, r24
	}

}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_2>:

// Interrupt service routine External Input1
ISR( INT1_vect )
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
    waitLength = waitLength + 50;					// toggle bit3 van PORTC bij extern int 1
 114:	80 91 00 01 	lds	r24, 0x0100
 118:	90 91 01 01 	lds	r25, 0x0101
 11c:	c2 96       	adiw	r24, 0x32	; 50
 11e:	90 93 01 01 	sts	0x0101, r25
 122:	80 93 00 01 	sts	0x0100, r24
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <exIntrInit>:

// Initialisation external interrupt EX0 and EX1
void exIntrInit( void )
{
	DDRD = DDRB & 0b11111100;			// PD1 en PD2 for input
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8c 7f       	andi	r24, 0xFC	; 252
 138:	81 bb       	out	0x11, r24	; 17
	EICRA |= 0x0F;					// EX0, EX1: rising edge	
 13a:	ea e6       	ldi	r30, 0x6A	; 106
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8f 60       	ori	r24, 0x0F	; 15
 142:	80 83       	st	Z, r24
	EIMSK |= 0x03;					// turn_on EI0, EI1
 144:	89 b7       	in	r24, 0x39	; 57
 146:	83 60       	ori	r24, 0x03	; 3
 148:	89 bf       	out	0x39, r24	; 57
	SREG |= 0x80;					// turn_on intr all
 14a:	8f b7       	in	r24, 0x3f	; 63
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8f bf       	out	0x3f, r24	; 63
 150:	08 95       	ret

00000152 <main>:
}

// Main program
int main( void )
{
	DDRC = 0b11111111;				// set PORTC for output
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	c4 bb       	out	0x14, r28	; 20
	DDRD = 0b00000000;				// set PORTD for inputâ€¨	PORTC |= BIT(0); initialize PORTC.0=1
 156:	11 ba       	out	0x11, r1	; 17
	PORTC |= BIT(3); 				// initialize PORTC.3=1
 158:	ab 9a       	sbi	0x15, 3	; 21
	exIntrInit();					// initialize EXT_INT0 en EXT_INT1
 15a:	ec df       	rcall	.-40     	; 0x134 <exIntrInit>

	DDRA = 0xFF;
 15c:	ca bb       	out	0x1a, r28	; 26
	DDRB = 0xFF;
 15e:	c7 bb       	out	0x17, r28	; 23
	int x = 0;
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
				PORTA = 0;	
			}	
		else 
			{
				PORTB=0;
				PORTA = (128>>x-8);	
 164:	68 94       	set
 166:	ee 24       	eor	r14, r14
 168:	e7 f8       	bld	r14, 7
 16a:	f1 2c       	mov	r15, r1
	while (1)
	{
		
		if(x<8)
			{
				PORTB = (1<<x);
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	10 e0       	ldi	r17, 0x00	; 0
			if(x==17) x=0;
		}
		else
		{
			--x; 
			if(x==-1) x=16;
 170:	68 94       	set
 172:	aa 24       	eor	r10, r10
 174:	a4 f8       	bld	r10, 4
 176:	b1 2c       	mov	r11, r1
			}
		wait( waitLength );
		if (toggle)
		{
			++x;
			if(x==17) x=0;
 178:	c1 2c       	mov	r12, r1
 17a:	d1 2c       	mov	r13, r1
 17c:	05 c0       	rjmp	.+10     	; 0x188 <main+0x36>
 17e:	cc 2d       	mov	r28, r12
 180:	dd 2d       	mov	r29, r13
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0x36>
		}
		else
		{
			--x; 
			if(x==-1) x=16;
 184:	ca 2d       	mov	r28, r10
 186:	db 2d       	mov	r29, r11
	int x = 0;

	while (1)
	{
		
		if(x<8)
 188:	c8 30       	cpi	r28, 0x08	; 8
 18a:	d1 05       	cpc	r29, r1
 18c:	54 f4       	brge	.+20     	; 0x1a2 <main+0x50>
			{
				PORTB = (1<<x);
 18e:	c8 01       	movw	r24, r16
 190:	0c 2e       	mov	r0, r28
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x46>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <main+0x42>
 19c:	88 bb       	out	0x18, r24	; 24
				PORTA = 0;	
 19e:	1b ba       	out	0x1b, r1	; 27
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <main+0x64>
			}	
		else 
			{
				PORTB=0;
 1a2:	18 ba       	out	0x18, r1	; 24
				PORTA = (128>>x-8);	
 1a4:	ce 01       	movw	r24, r28
 1a6:	08 97       	sbiw	r24, 0x08	; 8
 1a8:	97 01       	movw	r18, r14
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x5e>
 1ac:	35 95       	asr	r19
 1ae:	27 95       	ror	r18
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <main+0x5a>
 1b4:	2b bb       	out	0x1b, r18	; 27
			}
		wait( waitLength );
 1b6:	80 91 00 01 	lds	r24, 0x0100
 1ba:	90 91 01 01 	lds	r25, 0x0101
 1be:	7c df       	rcall	.-264    	; 0xb8 <wait>
		if (toggle)
 1c0:	80 91 02 01 	lds	r24, 0x0102
 1c4:	88 23       	and	r24, r24
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <main+0x80>
		{
			++x;
 1c8:	21 96       	adiw	r28, 0x01	; 1
			if(x==17) x=0;
 1ca:	c1 31       	cpi	r28, 0x11	; 17
 1cc:	d1 05       	cpc	r29, r1
 1ce:	e1 f6       	brne	.-72     	; 0x188 <main+0x36>
 1d0:	d6 cf       	rjmp	.-84     	; 0x17e <main+0x2c>
		}
		else
		{
			--x; 
 1d2:	21 97       	sbiw	r28, 0x01	; 1
 1d4:	c8 f6       	brcc	.-78     	; 0x188 <main+0x36>
 1d6:	d6 cf       	rjmp	.-84     	; 0x184 <main+0x32>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
